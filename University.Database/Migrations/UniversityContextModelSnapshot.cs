// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using University.Database;

namespace University.Database.Migrations
{
    [DbContext(typeof(UniversityContext))]
    partial class UniversityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("University.Database.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("University.Database.Models.GroupSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DayOfWeek");

                    b.Property<int?>("GroupId");

                    b.Property<int>("OrderNumber");

                    b.Property<int?>("SubjectId");

                    b.Property<int?>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("GroupSubjects");
                });

            modelBuilder.Entity("University.Database.Models.Mark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MarkValue");

                    b.HasKey("Id");

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("University.Database.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GroupId");

                    b.Property<string>("Message");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("University.Database.Models.NotificationStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("NotificationId");

                    b.Property<int?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("StudentId");

                    b.ToTable("NotificationStudents");
                });

            modelBuilder.Entity("University.Database.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SubjectName");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("University.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<string>("SecondName");

                    b.Property<int?>("UserRoleId");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("University.Database.Models.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GroupId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("University.Database.Models.UserMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GroupSubjectId");

                    b.Property<DateTime>("IssueData");

                    b.Property<int?>("MarkId");

                    b.Property<int?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("GroupSubjectId");

                    b.HasIndex("MarkId");

                    b.HasIndex("StudentId");

                    b.ToTable("UserMarks");
                });

            modelBuilder.Entity("University.Database.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("University.Database.Models.GroupSubject", b =>
                {
                    b.HasOne("University.Database.Models.Group", "Group")
                        .WithMany("GroupSubjects")
                        .HasForeignKey("GroupId");

                    b.HasOne("University.Database.Models.Subject", "Subject")
                        .WithMany("GroupSubjects")
                        .HasForeignKey("SubjectId");

                    b.HasOne("University.Database.Models.User", "Teacher")
                        .WithMany("GroupSubjects")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("University.Database.Models.Notification", b =>
                {
                    b.HasOne("University.Database.Models.Group", "Group")
                        .WithMany("Notifications")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("University.Database.Models.NotificationStudent", b =>
                {
                    b.HasOne("University.Database.Models.Notification", "Notification")
                        .WithMany("NotificationStudents")
                        .HasForeignKey("NotificationId");

                    b.HasOne("University.Database.Models.User", "Student")
                        .WithMany("NotificationStudents")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("University.Database.Models.User", b =>
                {
                    b.HasOne("University.Database.Models.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId");
                });

            modelBuilder.Entity("University.Database.Models.UserGroup", b =>
                {
                    b.HasOne("University.Database.Models.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId");

                    b.HasOne("University.Database.Models.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("University.Database.Models.UserMark", b =>
                {
                    b.HasOne("University.Database.Models.GroupSubject", "GroupSubject")
                        .WithMany("UserMarks")
                        .HasForeignKey("GroupSubjectId");

                    b.HasOne("University.Database.Models.Mark", "Mark")
                        .WithMany("UserMarks")
                        .HasForeignKey("MarkId");

                    b.HasOne("University.Database.Models.User", "Student")
                        .WithMany("UserMarks")
                        .HasForeignKey("StudentId");
                });
#pragma warning restore 612, 618
        }
    }
}
